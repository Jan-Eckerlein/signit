/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register
         * @description Register a new user.
         */
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description Login a user.
         */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Logout a user.
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Authenticated User
         * @description Retrieve the authenticated user.
         */
        get: operations["getAuthenticatedUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update User Profile
         * @description Update the authenticated user's profile.
         */
        put: operations["updateUserProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Session
         * @description Refresh the authenticated user's session.
         */
        post: operations["refreshSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Contacts
         * @description List all contacts owned by the authenticated user.
         */
        get: operations["listContacts"];
        put?: never;
        /**
         * Create Contact
         * @description Store a newly created contact in storage.
         */
        post: operations["createContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contacts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the contact.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        /**
         * Show Contact
         * @description Display the specified contact.
         */
        get: operations["showContact"];
        /**
         * Update Contact
         * @description Update the specified contact in storage.
         */
        put: operations["updateContact"];
        post?: never;
        /**
         * Delete Contact
         * @description Remove the specified contact from storage.
         */
        delete: operations["deleteContact"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/document-logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Document Logs
         * @description List all document logs that the user can view.
         */
        get: operations["listDocumentLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/document-logs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document log.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        /**
         * Show Document Log
         * @description Display the specified document log.
         */
        get: operations["showDocumentLog"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/document-signers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Document Signers
         * @description List all document signers.
         */
        get: operations["listDocumentSigners"];
        put?: never;
        /**
         * Create Document Signer
         * @description Store a newly created document signer in storage.
         */
        post: operations["createDocumentSigner"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/document-signers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document signer.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        /**
         * Show Document Signer
         * @description Display the specified document signer.
         */
        get: operations["showDocumentSigner"];
        /**
         * Update Document Signer
         * @description Update the specified document signer in storage.
         */
        put: operations["updateDocumentSigner"];
        post?: never;
        /**
         * Delete Document Signer
         * @description Remove the specified document signer from storage.
         */
        delete: operations["deleteDocumentSigner"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/document-signers/{documentSigner_id}/complete-signature": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the documentSigner.
                 * @example 16
                 */
                documentSigner_id: number;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete Signature
         * @description Complete the signature process and accept electronic disclosure.
         */
        post: operations["completeSignature"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Documents
         * @description List all documents viewable by the user.
         */
        get: operations["listDocuments"];
        put?: never;
        /**
         * Create Document
         * @description Store a newly created document in storage.
         */
        post: operations["createDocument"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        /**
         * Show Document
         * @description Display the specified document.
         */
        get: operations["showDocument"];
        /**
         * Update Document
         * @description Update the specified document in storage.
         */
        put: operations["updateDocument"];
        post?: never;
        /**
         * Delete Document
         * @description Remove the specified document from storage.
         */
        delete: operations["deleteDocument"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{document_id}/progress": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document.
                 * @example 16
                 */
                document_id: number;
            };
            cookie?: never;
        };
        /**
         * Get Document Progress
         * @description Retrieve the progress of the specified document.
         */
        get: operations["getDocumentProgress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/document-field-values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Signer Document Field Value
         * @description Store a newly created signer document field value in storage.
         */
        post: operations["createSignerDocumentFieldValue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/document-fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Signer Document Fields
         * @description List all signer document fields.
         */
        get: operations["listSignerDocumentFields"];
        put?: never;
        /**
         * Create Signer Document Field
         * @description Store a newly created signer document field in storage.
         */
        post: operations["createSignerDocumentField"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/document-fields/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document field.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        /**
         * Show Signer Document Field
         * @description Display the specified signer document field.
         */
        get: operations["showSignerDocumentField"];
        /**
         * Update Signer Document Field
         * @description Update the specified signer document field in storage.
         */
        put: operations["updateSignerDocumentField"];
        post?: never;
        /**
         * Delete Signer Document Field
         * @description Remove the specified signer document field from storage.
         */
        delete: operations["deleteSignerDocumentField"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/signs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Signs
         * @description List all signs owned by the user
         */
        get: operations["listSigns"];
        put?: never;
        /**
         * Create Sign
         * @description Store a newly created sign for a document in storage.
         */
        post: operations["createSign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/signs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the sign.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        /**
         * Show Sign
         * @description Display the specified sign.
         */
        get: operations["showSign"];
        /**
         * Update Sign
         * @description Update the specified sign in storage.
         */
        put: operations["updateSign"];
        post?: never;
        /**
         * Delete Sign
         * @description Remove the specified sign from storage.
         */
        delete: operations["deleteSign"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/signs/{sign_id}/force": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the sign.
                 * @example 16
                 */
                sign_id: number;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Force Delete Sign
         * @description Force delete a sign (only if not being used).
         */
        delete: operations["forceDeleteSign"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example b
                     */
                    name: string;
                    /**
                     * @description Must be a valid email address. Must not be greater than 255 characters.
                     * @example zbailey@example.net
                     */
                    email: string;
                    /**
                     * @description Must be at least 8 characters.
                     * @example -0pBNvYgxw
                     */
                    password: string;
                    /**
                     * @description Must be at least 8 characters.
                     * @example aykcmyuwpwlvqwrsitcpscqldz
                     */
                    password_confirmation: string;
                    /**
                     * @example session
                     * @enum {string}
                     */
                    handler: "token" | "session";
                };
            };
        };
        responses: never;
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Must be a valid email address.
                     * @example gbailey@example.net
                     */
                    email: string;
                    /** @example |]|{+- */
                    password: string;
                    /**
                     * @example session
                     * @enum {string}
                     */
                    handler: "token" | "session";
                };
            };
        };
        responses: never;
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    getAuthenticatedUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example Scribe API */
                            name?: string;
                            /** @example scribe@example.com */
                            email?: string;
                            /** @example null */
                            email_verified_at?: string;
                            /** @example 2025-07-17T19:20:11.000000Z */
                            created_at?: string;
                            /** @example 2025-07-17T19:20:11.000000Z */
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    updateUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example b
                     */
                    name?: string;
                };
            };
        };
        responses: never;
    };
    refreshSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    listContacts: {
        parameters: {
            query?: {
                /**
                 * @description The number of items to return per page.
                 * @example 20
                 */
                per_page?: number;
                /**
                 * @description Get all records without pagination.
                 * @example false
                 */
                all?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example [
                         *       {
                         *         "id": 1,
                         *         "user_id": 2,
                         *         "email": "hirthe.theo@hauck.com",
                         *         "name": "Alanis McLaughlin",
                         *         "created_at": "2025-07-18T10:44:28.000000Z",
                         *         "updated_at": "2025-07-18T10:44:28.000000Z"
                         *       },
                         *       {
                         *         "id": 2,
                         *         "user_id": 3,
                         *         "email": "nstokes@yahoo.com",
                         *         "name": "Dr. Grayson Glover",
                         *         "created_at": "2025-07-18T10:44:28.000000Z",
                         *         "updated_at": "2025-07-18T10:44:28.000000Z"
                         *       }
                         *     ] */
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example 2 */
                            user_id?: number;
                            /** @example hirthe.theo@hauck.com */
                            email?: string;
                            /** @example Alanis McLaughlin */
                            name?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            created_at?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            updated_at?: string;
                        }[];
                        links?: {
                            /** @example /?page=1 */
                            first?: string;
                            /** @example /?page=1 */
                            last?: string;
                            /** @example null */
                            prev?: string;
                            /** @example null */
                            next?: string;
                        };
                        meta?: {
                            /** @example 1 */
                            current_page?: number;
                            /** @example 1 */
                            from?: number;
                            /** @example 1 */
                            last_page?: number;
                            /** @example [
                             *       {
                             *         "url": null,
                             *         "label": "&laquo; Previous",
                             *         "active": false
                             *       },
                             *       {
                             *         "url": "/?page=1",
                             *         "label": "1",
                             *         "active": true
                             *       },
                             *       {
                             *         "url": null,
                             *         "label": "Next &raquo;",
                             *         "active": false
                             *       }
                             *     ] */
                            links?: {
                                /** @example null */
                                url?: string;
                                /** @example &laquo; Previous */
                                label?: string;
                                /** @example false */
                                active?: boolean;
                            }[];
                            /** @example / */
                            path?: string;
                            /** @example 20 */
                            per_page?: number;
                            /** @example 2 */
                            to?: number;
                            /** @example 2 */
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    createContact: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Must be a valid email address. Must not be greater than 255 characters.
                     * @example gbailey@example.net
                     */
                    email: string;
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example m
                     */
                    name: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example 2 */
                            user_id?: number;
                            /** @example okon.justina@gaylord.com */
                            email?: string;
                            /** @example Mittie Considine */
                            name?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            created_at?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    showContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the contact.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example 2 */
                            user_id?: number;
                            /** @example hirthe.theo@hauck.com */
                            email?: string;
                            /** @example Alanis McLaughlin */
                            name?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            created_at?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    updateContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the contact.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Must be a valid email address. Must not be greater than 255 characters.
                     * @example gbailey@example.net
                     */
                    email?: string;
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example m
                     */
                    name?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example 2 */
                            user_id?: number;
                            /** @example okon.justina@gaylord.com */
                            email?: string;
                            /** @example Mittie Considine */
                            name?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            created_at?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    deleteContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the contact.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example 2 */
                            user_id?: number;
                            /** @example hirthe.theo@hauck.com */
                            email?: string;
                            /** @example Alanis McLaughlin */
                            name?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            created_at?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    listDocumentLogs: {
        parameters: {
            query?: {
                /**
                 * @description The number of items to return per page.
                 * @example 20
                 */
                per_page?: number;
                /**
                 * @description Get all records without pagination.
                 * @example false
                 */
                all?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example [
                         *       {
                         *         "id": 1,
                         *         "document_signer_id": 1,
                         *         "document_id": 2,
                         *         "ip": "125.161.29.220",
                         *         "date": "2007-06-23T16:18:00.000000Z",
                         *         "icon": "create",
                         *         "text": "Commodi incidunt iure odit.",
                         *         "created_at": "2025-07-18T10:44:28.000000Z",
                         *         "updated_at": "2025-07-18T10:44:28.000000Z"
                         *       },
                         *       {
                         *         "id": 2,
                         *         "document_signer_id": 2,
                         *         "document_id": 4,
                         *         "ip": "158.139.113.99",
                         *         "date": "1975-12-05T02:48:12.000000Z",
                         *         "icon": "watch",
                         *         "text": "Ut aut deserunt et error neque recusandae et.",
                         *         "created_at": "2025-07-18T10:44:28.000000Z",
                         *         "updated_at": "2025-07-18T10:44:28.000000Z"
                         *       }
                         *     ] */
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example 1 */
                            document_signer_id?: number;
                            /** @example 2 */
                            document_id?: number;
                            /** @example 125.161.29.220 */
                            ip?: string;
                            /** @example 2007-06-23T16:18:00.000000Z */
                            date?: string;
                            /** @example create */
                            icon?: string;
                            /** @example Commodi incidunt iure odit. */
                            text?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            created_at?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            updated_at?: string;
                        }[];
                        links?: {
                            /** @example /?page=1 */
                            first?: string;
                            /** @example /?page=1 */
                            last?: string;
                            /** @example null */
                            prev?: string;
                            /** @example null */
                            next?: string;
                        };
                        meta?: {
                            /** @example 1 */
                            current_page?: number;
                            /** @example 1 */
                            from?: number;
                            /** @example 1 */
                            last_page?: number;
                            /** @example [
                             *       {
                             *         "url": null,
                             *         "label": "&laquo; Previous",
                             *         "active": false
                             *       },
                             *       {
                             *         "url": "/?page=1",
                             *         "label": "1",
                             *         "active": true
                             *       },
                             *       {
                             *         "url": null,
                             *         "label": "Next &raquo;",
                             *         "active": false
                             *       }
                             *     ] */
                            links?: {
                                /** @example null */
                                url?: string;
                                /** @example &laquo; Previous */
                                label?: string;
                                /** @example false */
                                active?: boolean;
                            }[];
                            /** @example / */
                            path?: string;
                            /** @example 20 */
                            per_page?: number;
                            /** @example 2 */
                            to?: number;
                            /** @example 2 */
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    showDocumentLog: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document log.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example 1 */
                            document_signer_id?: number;
                            /** @example 2 */
                            document_id?: number;
                            /** @example 125.161.29.220 */
                            ip?: string;
                            /** @example 2007-06-23T16:18:00.000000Z */
                            date?: string;
                            /** @example create */
                            icon?: string;
                            /** @example Commodi incidunt iure odit. */
                            text?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            created_at?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    listDocumentSigners: {
        parameters: {
            query?: {
                /**
                 * @description The number of items to return per page.
                 * @example 20
                 */
                per_page?: number;
                /**
                 * @description Get all records without pagination.
                 * @example false
                 */
                all?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Server Error */
                        message?: string;
                    };
                };
            };
        };
    };
    createDocumentSigner: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The <code>id</code> of an existing record in the documents table.
                     * @example architecto
                     */
                    document_id: string;
                    /**
                     * @description Must be a valid email address.
                     * @example zbailey@example.net
                     */
                    email?: string | null;
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example i
                     */
                    name: string;
                    /**
                     * @description Must not be greater than 1000 characters.
                     * @example Fugiat sunt nihil accusantium harum mollitia.
                     */
                    description?: string | null;
                };
            };
        };
        responses: never;
    };
    showDocumentSigner: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document signer.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example No query results for model [App\Models\DocumentSigner]. */
                        message?: string;
                    };
                };
            };
        };
    };
    updateDocumentSigner: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document signer.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The <code>id</code> of an existing record in the documents table.
                     * @example null
                     */
                    document_id?: string;
                    /**
                     * @description Must be a valid email address.
                     * @example gbailey@example.net
                     */
                    email?: string;
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example m
                     */
                    name?: string;
                    /**
                     * @description Must not be greater than 1000 characters.
                     * @example Et fugiat sunt nihil accusantium.
                     */
                    description?: string;
                };
            };
        };
        responses: never;
    };
    deleteDocumentSigner: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document signer.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    completeSignature: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the documentSigner.
                 * @example 16
                 */
                documentSigner_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Must be accepted.
                     * @example true
                     */
                    electronic_signature_disclosure_accepted: boolean;
                };
            };
        };
        responses: never;
    };
    listDocuments: {
        parameters: {
            query?: {
                /**
                 * @description The number of items to return per page.
                 * @example 20
                 */
                per_page?: number;
                /**
                 * @description Get all records without pagination.
                 * @example false
                 */
                all?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example [
                         *       {
                         *         "id": 1,
                         *         "title": "Adipisci quidem nostrum qui.",
                         *         "owner_user_id": 2,
                         *         "description": "Iure odit et et modi ipsum nostrum omnis. Et consequatur aut dolores enim. Facere tempora ex voluptatem laboriosam. Quis adipisci molestias fugit deleniti distinctio eum.",
                         *         "status": "draft",
                         *         "template_document_id": null,
                         *         "created_at": "2025-07-18T10:44:28.000000Z",
                         *         "updated_at": "2025-07-18T10:44:28.000000Z"
                         *       },
                         *       {
                         *         "id": 2,
                         *         "title": "Deleniti nemo odit.",
                         *         "owner_user_id": 3,
                         *         "description": "Est dignissimos neque blanditiis odio veritatis excepturi doloribus. Fugit qui repudiandae laboriosam est alias. Ratione nemo voluptate accusamus ut et recusandae modi rerum. Repellendus assumenda et tenetur ab reiciendis.",
                         *         "status": "draft",
                         *         "template_document_id": null,
                         *         "created_at": "2025-07-18T10:44:28.000000Z",
                         *         "updated_at": "2025-07-18T10:44:28.000000Z"
                         *       }
                         *     ] */
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example Adipisci quidem nostrum qui. */
                            title?: string;
                            /** @example 2 */
                            owner_user_id?: number;
                            /** @example Iure odit et et modi ipsum nostrum omnis. Et consequatur aut dolores enim. Facere tempora ex voluptatem laboriosam. Quis adipisci molestias fugit deleniti distinctio eum. */
                            description?: string;
                            /** @example draft */
                            status?: string;
                            /** @example null */
                            template_document_id?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            created_at?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            updated_at?: string;
                        }[];
                        links?: {
                            /** @example /?page=1 */
                            first?: string;
                            /** @example /?page=1 */
                            last?: string;
                            /** @example null */
                            prev?: string;
                            /** @example null */
                            next?: string;
                        };
                        meta?: {
                            /** @example 1 */
                            current_page?: number;
                            /** @example 1 */
                            from?: number;
                            /** @example 1 */
                            last_page?: number;
                            /** @example [
                             *       {
                             *         "url": null,
                             *         "label": "&laquo; Previous",
                             *         "active": false
                             *       },
                             *       {
                             *         "url": "/?page=1",
                             *         "label": "1",
                             *         "active": true
                             *       },
                             *       {
                             *         "url": null,
                             *         "label": "Next &raquo;",
                             *         "active": false
                             *       }
                             *     ] */
                            links?: {
                                /** @example null */
                                url?: string;
                                /** @example &laquo; Previous */
                                label?: string;
                                /** @example false */
                                active?: boolean;
                            }[];
                            /** @example / */
                            path?: string;
                            /** @example 20 */
                            per_page?: number;
                            /** @example 2 */
                            to?: number;
                            /** @example 2 */
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    createDocument: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example b
                     */
                    title: string;
                    /**
                     * @description Must not be greater than 1000 characters.
                     * @example Et animi quos velit et fugiat.
                     */
                    description?: string | null;
                    /** @example false */
                    is_template: boolean;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example Nihil accusantium harum. */
                            title?: string;
                            /** @example 2 */
                            owner_user_id?: number;
                            /** @example Deserunt aut ab provident perspiciatis quo omnis nostrum. Adipisci quidem nostrum qui commodi incidunt iure. Et et modi ipsum nostrum. */
                            description?: string;
                            /** @example draft */
                            status?: string;
                            /** @example null */
                            template_document_id?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            created_at?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    showDocument: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example Adipisci quidem nostrum qui. */
                            title?: string;
                            /** @example 2 */
                            owner_user_id?: number;
                            /** @example Iure odit et et modi ipsum nostrum omnis. Et consequatur aut dolores enim. Facere tempora ex voluptatem laboriosam. Quis adipisci molestias fugit deleniti distinctio eum. */
                            description?: string;
                            /** @example draft */
                            status?: string;
                            /** @example null */
                            template_document_id?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            created_at?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    updateDocument: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example b
                     */
                    title?: string;
                    /**
                     * @description Must not be greater than 1000 characters.
                     * @example Et animi quos velit et fugiat.
                     */
                    description?: string | null;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example Nihil accusantium harum. */
                            title?: string;
                            /** @example 2 */
                            owner_user_id?: number;
                            /** @example Deserunt aut ab provident perspiciatis quo omnis nostrum. Adipisci quidem nostrum qui commodi incidunt iure. Et et modi ipsum nostrum. */
                            description?: string;
                            /** @example draft */
                            status?: string;
                            /** @example null */
                            template_document_id?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            created_at?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    deleteDocument: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    getDocumentProgress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document.
                 * @example 16
                 */
                document_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 0 */
                            total_signers?: number;
                            /** @example 0 */
                            completed_signers?: number;
                            /** @example [] */
                            signers_progress?: unknown[];
                        };
                    };
                };
            };
        };
    };
    createSignerDocumentFieldValue: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The <code>id</code> of an existing record in the signer_document_fields table.
                     * @example architecto
                     */
                    signer_document_field_id: string;
                    /**
                     * @description The <code>id</code> of an existing record in the signs table.
                     * @example null
                     */
                    value_signature_sign_id?: string | null;
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example n
                     */
                    value_initials?: string | null;
                    /** @example architecto */
                    value_text?: string | null;
                    /** @example false */
                    value_checkbox?: boolean | null;
                    /**
                     * @description Must be a valid date.
                     * @example 2025-07-18T10:44:28
                     */
                    value_date?: string | null;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example 1 */
                            document_field_id?: number;
                            /** @example null */
                            value_signature_sign_id?: string;
                            /** @example gz */
                            value_initials?: string;
                            /** @example null */
                            value_text?: string;
                            /** @example null */
                            value_checkbox?: string;
                            /** @example null */
                            value_date?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            created_at?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    listSignerDocumentFields: {
        parameters: {
            query?: {
                /**
                 * @description The number of items to return per page.
                 * @example 20
                 */
                per_page?: number;
                /**
                 * @description Get all records without pagination.
                 * @example false
                 */
                all?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example [
                         *       {
                         *         "id": 1,
                         *         "document_signer_id": 1,
                         *         "page": null,
                         *         "x": 230,
                         *         "y": 812,
                         *         "width": 202,
                         *         "height": 76,
                         *         "type": "checkbox",
                         *         "label": "adipisci",
                         *         "description": "Provident et ut asperiores ex.",
                         *         "required": true,
                         *         "created_at": "2025-07-18T10:44:28.000000Z",
                         *         "updated_at": "2025-07-18T10:44:28.000000Z"
                         *       },
                         *       {
                         *         "id": 2,
                         *         "document_signer_id": 2,
                         *         "page": null,
                         *         "x": 123,
                         *         "y": 508,
                         *         "width": 294,
                         *         "height": 262,
                         *         "type": "checkbox",
                         *         "label": "non",
                         *         "description": "Ut cupiditate eius explicabo doloremque et dolore dolorem.",
                         *         "required": true,
                         *         "created_at": "2025-07-18T10:44:28.000000Z",
                         *         "updated_at": "2025-07-18T10:44:28.000000Z"
                         *       }
                         *     ] */
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example 1 */
                            document_signer_id?: number;
                            /** @example null */
                            page?: string;
                            /** @example 230 */
                            x?: number;
                            /** @example 812 */
                            y?: number;
                            /** @example 202 */
                            width?: number;
                            /** @example 76 */
                            height?: number;
                            /** @example checkbox */
                            type?: string;
                            /** @example adipisci */
                            label?: string;
                            /** @example Provident et ut asperiores ex. */
                            description?: string;
                            /** @example true */
                            required?: boolean;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            created_at?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            updated_at?: string;
                        }[];
                        links?: {
                            /** @example /?page=1 */
                            first?: string;
                            /** @example /?page=1 */
                            last?: string;
                            /** @example null */
                            prev?: string;
                            /** @example null */
                            next?: string;
                        };
                        meta?: {
                            /** @example 1 */
                            current_page?: number;
                            /** @example 1 */
                            from?: number;
                            /** @example 1 */
                            last_page?: number;
                            /** @example [
                             *       {
                             *         "url": null,
                             *         "label": "&laquo; Previous",
                             *         "active": false
                             *       },
                             *       {
                             *         "url": "/?page=1",
                             *         "label": "1",
                             *         "active": true
                             *       },
                             *       {
                             *         "url": null,
                             *         "label": "Next &raquo;",
                             *         "active": false
                             *       }
                             *     ] */
                            links?: {
                                /** @example null */
                                url?: string;
                                /** @example &laquo; Previous */
                                label?: string;
                                /** @example false */
                                active?: boolean;
                            }[];
                            /** @example / */
                            path?: string;
                            /** @example 20 */
                            per_page?: number;
                            /** @example 2 */
                            to?: number;
                            /** @example 2 */
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    createSignerDocumentField: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The <code>id</code> of an existing record in the document_signers table.
                     * @example null
                     */
                    document_signer_id?: string | null;
                    /**
                     * @description The <code>id</code> of an existing record in the document_pages table.
                     * @example architecto
                     */
                    document_page_id: string;
                    /** @example 4326.41688 */
                    x: number;
                    /** @example 4326.41688 */
                    y: number;
                    /**
                     * @description Must be at least 0.
                     * @example 77
                     */
                    width: number;
                    /**
                     * @description Must be at least 0.
                     * @example 8
                     */
                    height: number;
                    /**
                     * @example date
                     * @enum {string}
                     */
                    type: "signature" | "initials" | "text" | "checkbox" | "date";
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example y
                     */
                    label: string;
                    /** @example Eius et animi quos velit et. */
                    description?: string | null;
                    /** @example false */
                    required?: boolean;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example 1 */
                            document_signer_id?: number;
                            /** @example null */
                            page?: string;
                            /** @example 970 */
                            x?: number;
                            /** @example 952 */
                            y?: number;
                            /** @example 130 */
                            width?: number;
                            /** @example 244 */
                            height?: number;
                            /** @example initials */
                            type?: string;
                            /** @example mollitia */
                            label?: string;
                            /** @example null */
                            description?: string;
                            /** @example false */
                            required?: boolean;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            created_at?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    showSignerDocumentField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document field.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example 1 */
                            document_signer_id?: number;
                            /** @example null */
                            page?: string;
                            /** @example 72 */
                            x?: number;
                            /** @example 880 */
                            y?: number;
                            /** @example 150 */
                            width?: number;
                            /** @example 133 */
                            height?: number;
                            /** @example initials */
                            type?: string;
                            /** @example commodi */
                            label?: string;
                            /** @example Odit et et modi. */
                            description?: string;
                            /** @example false */
                            required?: boolean;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            created_at?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    updateSignerDocumentField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document field.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The <code>id</code> of an existing record in the document_signers table.
                     * @example null
                     */
                    document_signer_id?: string;
                    /**
                     * @description The <code>id</code> of an existing record in the document_pages table.
                     * @example null
                     */
                    document_page_id?: string;
                    /** @example 4326.41688 */
                    x?: number;
                    /** @example 4326.41688 */
                    y?: number;
                    /**
                     * @description Must be at least 0.
                     * @example 77
                     */
                    width?: number;
                    /**
                     * @description Must be at least 0.
                     * @example 8
                     */
                    height?: number;
                    /**
                     * @example checkbox
                     * @enum {string}
                     */
                    type?: "signature" | "initials" | "text" | "checkbox" | "date";
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example y
                     */
                    label?: string;
                    /** @example Eius et animi quos velit et. */
                    description?: string | null;
                    /** @example true */
                    required?: boolean;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example 1 */
                            document_signer_id?: number;
                            /** @example null */
                            page?: string;
                            /** @example 970 */
                            x?: number;
                            /** @example 952 */
                            y?: number;
                            /** @example 130 */
                            width?: number;
                            /** @example 244 */
                            height?: number;
                            /** @example initials */
                            type?: string;
                            /** @example mollitia */
                            label?: string;
                            /** @example null */
                            description?: string;
                            /** @example false */
                            required?: boolean;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            created_at?: string;
                            /** @example 2025-07-18T10:44:28.000000Z */
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    deleteSignerDocumentField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document field.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    listSigns: {
        parameters: {
            query?: {
                /**
                 * @description The number of items to return per page.
                 * @example 20
                 */
                per_page?: number;
                /**
                 * @description Get all records without pagination.
                 * @example false
                 */
                all?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Server Error */
                        message?: string;
                    };
                };
            };
        };
    };
    createSign: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example 2 */
                            user_id?: number;
                            /** @example 2024-10-11T01:11:20.000000Z */
                            created_at?: string;
                            /** @example 2024-11-06T01:38:46.000000Z */
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    showSign: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the sign.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example 2 */
                            user_id?: number;
                            /** @example 2024-10-11T01:11:20.000000Z */
                            created_at?: string;
                            /** @example 2024-11-06T01:38:46.000000Z */
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    updateSign: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the sign.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example 2 */
                            user_id?: number;
                            /** @example 2024-10-11T01:11:20.000000Z */
                            created_at?: string;
                            /** @example 2024-11-06T01:38:46.000000Z */
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    deleteSign: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the sign.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    forceDeleteSign: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the sign.
                 * @example 16
                 */
                sign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
}
