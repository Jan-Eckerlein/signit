/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["postApiAuthRegister"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["postApiAuthLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["postApiAuthLogout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiAuthMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["putApiAuthProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["postApiAuthRefresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApiDocuments"];
        put?: never;
        post: operations["postApiDocuments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document.
                 * @example 1
                 */
                id: number;
            };
            cookie?: never;
        };
        get: operations["getApiDocumentsId"];
        put: operations["putApiDocumentsId"];
        post?: never;
        delete: operations["deleteApiDocumentsId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/anonymous-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Display a listing of the resource. */
        get: operations["displayAListingOfTheResource"];
        put?: never;
        /** Store a newly created resource in storage. */
        post: operations["storeANewlyCreatedResourceInStorage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/anonymous-users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the anonymous user.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        /** Display the specified resource. */
        get: operations["displayTheSpecifiedResource"];
        /** Update the specified resource in storage. */
        put: operations["updateTheSpecifiedResourceInStorage"];
        post?: never;
        /** Remove the specified resource from storage. */
        delete: operations["removeTheSpecifiedResourceFromStorage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Display a listing of the resource. */
        get: operations["displayAListingOfTheResource"];
        put?: never;
        /** Store a newly created resource in storage. */
        post: operations["storeANewlyCreatedResourceInStorage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contacts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the contact.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        /** Display the specified resource. */
        get: operations["displayTheSpecifiedResource"];
        /** Update the specified resource in storage. */
        put: operations["updateTheSpecifiedResourceInStorage"];
        post?: never;
        /** Remove the specified resource from storage. */
        delete: operations["removeTheSpecifiedResourceFromStorage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/document-signers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Display a listing of the resource. */
        get: operations["displayAListingOfTheResource"];
        put?: never;
        /** Store a newly created resource in storage. */
        post: operations["storeANewlyCreatedResourceInStorage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/document-signers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document signer.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        /** Display the specified resource. */
        get: operations["displayTheSpecifiedResource"];
        /** Update the specified resource in storage. */
        put: operations["updateTheSpecifiedResourceInStorage"];
        post?: never;
        /** Remove the specified resource from storage. */
        delete: operations["removeTheSpecifiedResourceFromStorage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/signer-document-fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Display a listing of the resource. */
        get: operations["displayAListingOfTheResource"];
        put?: never;
        /** Store a newly created resource in storage. */
        post: operations["storeANewlyCreatedResourceInStorage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/signer-document-fields/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the signer document field.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        /** Display the specified resource. */
        get: operations["displayTheSpecifiedResource"];
        /** Update the specified resource in storage. */
        put: operations["updateTheSpecifiedResourceInStorage"];
        post?: never;
        /** Remove the specified resource from storage. */
        delete: operations["removeTheSpecifiedResourceFromStorage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/signs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Display a listing of the resource. */
        get: operations["displayAListingOfTheResource"];
        put?: never;
        /** Store a newly created resource in storage. */
        post: operations["storeANewlyCreatedResourceInStorage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/signs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the sign.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        /** Display the specified resource. */
        get: operations["displayTheSpecifiedResource"];
        /** Update the specified resource in storage. */
        put: operations["updateTheSpecifiedResourceInStorage"];
        post?: never;
        /** Remove the specified resource from storage. */
        delete: operations["removeTheSpecifiedResourceFromStorage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    postApiAuthRegister: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example b
                     */
                    name: string;
                    /**
                     * @description Must be a valid email address. Must not be greater than 255 characters.
                     * @example zbailey@example.net
                     */
                    email: string;
                    /**
                     * @description Must be at least 8 characters.
                     * @example -0pBNvYgxw
                     */
                    password: string;
                    /**
                     * @description Must be at least 8 characters.
                     * @example aykcmyuwpwlvqwrsitcpscqldz
                     */
                    password_confirmation: string;
                    /**
                     * @example token
                     * @enum {string}
                     */
                    handler: "token" | "session";
                };
            };
        };
        responses: never;
    };
    postApiAuthLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Must be a valid email address.
                     * @example gbailey@example.net
                     */
                    email: string;
                    /** @example |]|{+- */
                    password: string;
                    /**
                     * @example token
                     * @enum {string}
                     */
                    handler: "token" | "session";
                };
            };
        };
        responses: never;
    };
    postApiAuthLogout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    getApiAuthMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 9 */
                            id?: number;
                            /** @example Scribe API */
                            name?: string;
                            /** @example scribe@example.com */
                            email?: string;
                            /** @example null */
                            email_verified_at?: string;
                            /** @example 2025-07-04T14:26:40.000000Z */
                            created_at?: string;
                            /** @example 2025-07-04T14:26:40.000000Z */
                            updated_at?: string;
                        };
                    };
                };
            };
        };
    };
    putApiAuthProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example b
                     */
                    name?: string;
                };
            };
        };
        responses: never;
    };
    postApiAuthRefresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    getApiDocuments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example This action is unauthorized. */
                        message?: string;
                    };
                };
            };
        };
    };
    postApiDocuments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example b
                     */
                    title: string;
                    /** @example Eius et animi quos velit et. */
                    description?: string | null;
                    /** @example true */
                    is_template: boolean;
                };
            };
        };
        responses: never;
    };
    getApiDocumentsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document.
                 * @example 1
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example This action is unauthorized. */
                        message?: string;
                    };
                };
            };
        };
    };
    putApiDocumentsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document.
                 * @example 1
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example b
                     */
                    title?: string;
                    /**
                     * @description The <code>id</code> of an existing record in the users table.
                     * @example null
                     */
                    owner_user_id?: string;
                    /** @example Eius et animi quos velit et. */
                    description?: string | null;
                    /**
                     * @example template
                     * @enum {string}
                     */
                    status?: "draft" | "open" | "in_progress" | "completed" | "template";
                };
            };
        };
        responses: never;
    };
    deleteApiDocumentsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document.
                 * @example 1
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    displayAListingOfTheResource: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example [] */
                        data?: unknown[];
                        links?: {
                            /** @example http://localhost:8000/api/anonymous-users?page=1 */
                            first?: string;
                            /** @example http://localhost:8000/api/anonymous-users?page=1 */
                            last?: string;
                            /** @example null */
                            prev?: string;
                            /** @example null */
                            next?: string;
                        };
                        meta?: {
                            /** @example 1 */
                            current_page?: number;
                            /** @example null */
                            from?: string;
                            /** @example 1 */
                            last_page?: number;
                            /** @example [
                             *       {
                             *         "url": null,
                             *         "label": "&laquo; Previous",
                             *         "active": false
                             *       },
                             *       {
                             *         "url": "http://localhost:8000/api/anonymous-users?page=1",
                             *         "label": "1",
                             *         "active": true
                             *       },
                             *       {
                             *         "url": null,
                             *         "label": "Next &raquo;",
                             *         "active": false
                             *       }
                             *     ] */
                            links?: {
                                /** @example null */
                                url?: string;
                                /** @example &laquo; Previous */
                                label?: string;
                                /** @example false */
                                active?: boolean;
                            }[];
                            /** @example http://localhost:8000/api/anonymous-users */
                            path?: string;
                            /** @example 15 */
                            per_page?: number;
                            /** @example null */
                            to?: string;
                            /** @example 0 */
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    storeANewlyCreatedResourceInStorage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Must be a valid email address. Must not be greater than 255 characters.
                     * @example gbailey@example.net
                     */
                    email: string;
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example m
                     */
                    name: string;
                };
            };
        };
        responses: never;
    };
    displayTheSpecifiedResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the anonymous user.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example No query results for model [App\Models\AnonymousUser] 16 */
                        message?: string;
                    };
                };
            };
        };
    };
    updateTheSpecifiedResourceInStorage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the anonymous user.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Must be a valid email address. Must not be greater than 255 characters.
                     * @example gbailey@example.net
                     */
                    email?: string;
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example m
                     */
                    name?: string;
                };
            };
        };
        responses: never;
    };
    removeTheSpecifiedResourceFromStorage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the anonymous user.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    displayAListingOfTheResource: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example [] */
                        data?: unknown[];
                        links?: {
                            /** @example http://localhost:8000/api/contacts?page=1 */
                            first?: string;
                            /** @example http://localhost:8000/api/contacts?page=1 */
                            last?: string;
                            /** @example null */
                            prev?: string;
                            /** @example null */
                            next?: string;
                        };
                        meta?: {
                            /** @example 1 */
                            current_page?: number;
                            /** @example null */
                            from?: string;
                            /** @example 1 */
                            last_page?: number;
                            /** @example [
                             *       {
                             *         "url": null,
                             *         "label": "&laquo; Previous",
                             *         "active": false
                             *       },
                             *       {
                             *         "url": "http://localhost:8000/api/contacts?page=1",
                             *         "label": "1",
                             *         "active": true
                             *       },
                             *       {
                             *         "url": null,
                             *         "label": "Next &raquo;",
                             *         "active": false
                             *       }
                             *     ] */
                            links?: {
                                /** @example null */
                                url?: string;
                                /** @example &laquo; Previous */
                                label?: string;
                                /** @example false */
                                active?: boolean;
                            }[];
                            /** @example http://localhost:8000/api/contacts */
                            path?: string;
                            /** @example 15 */
                            per_page?: number;
                            /** @example null */
                            to?: string;
                            /** @example 0 */
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    storeANewlyCreatedResourceInStorage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The <code>id</code> of an existing record in the users table.
                     * @example architecto
                     */
                    own_user_id: string;
                    /**
                     * @description The <code>id</code> of an existing record in the users table.
                     * @example null
                     */
                    knows_user_id?: string | null;
                    /**
                     * @description The <code>id</code> of an existing record in the anonymous_users table.
                     * @example null
                     */
                    knows_anonymous_users_id?: string | null;
                    /**
                     * @description Must be a valid email address. Must not be greater than 255 characters.
                     * @example zbailey@example.net
                     */
                    email: string;
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example i
                     */
                    name: string;
                };
            };
        };
        responses: never;
    };
    displayTheSpecifiedResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the contact.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example No query results for model [App\Models\Contact] 16 */
                        message?: string;
                    };
                };
            };
        };
    };
    updateTheSpecifiedResourceInStorage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the contact.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The <code>id</code> of an existing record in the users table.
                     * @example null
                     */
                    own_user_id?: string;
                    /**
                     * @description The <code>id</code> of an existing record in the users table.
                     * @example null
                     */
                    knows_user_id?: string | null;
                    /**
                     * @description The <code>id</code> of an existing record in the anonymous_users table.
                     * @example null
                     */
                    knows_anonymous_users_id?: string | null;
                    /**
                     * @description Must be a valid email address. Must not be greater than 255 characters.
                     * @example gbailey@example.net
                     */
                    email?: string;
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example m
                     */
                    name?: string;
                };
            };
        };
        responses: never;
    };
    removeTheSpecifiedResourceFromStorage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the contact.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    displayAListingOfTheResource: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example [] */
                        data?: unknown[];
                        links?: {
                            /** @example http://localhost:8000/api/document-signers?page=1 */
                            first?: string;
                            /** @example http://localhost:8000/api/document-signers?page=1 */
                            last?: string;
                            /** @example null */
                            prev?: string;
                            /** @example null */
                            next?: string;
                        };
                        meta?: {
                            /** @example 1 */
                            current_page?: number;
                            /** @example null */
                            from?: string;
                            /** @example 1 */
                            last_page?: number;
                            /** @example [
                             *       {
                             *         "url": null,
                             *         "label": "&laquo; Previous",
                             *         "active": false
                             *       },
                             *       {
                             *         "url": "http://localhost:8000/api/document-signers?page=1",
                             *         "label": "1",
                             *         "active": true
                             *       },
                             *       {
                             *         "url": null,
                             *         "label": "Next &raquo;",
                             *         "active": false
                             *       }
                             *     ] */
                            links?: {
                                /** @example null */
                                url?: string;
                                /** @example &laquo; Previous */
                                label?: string;
                                /** @example false */
                                active?: boolean;
                            }[];
                            /** @example http://localhost:8000/api/document-signers */
                            path?: string;
                            /** @example 15 */
                            per_page?: number;
                            /** @example null */
                            to?: string;
                            /** @example 0 */
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    storeANewlyCreatedResourceInStorage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The <code>id</code> of an existing record in the documents table.
                     * @example architecto
                     */
                    document_id: string;
                    /**
                     * @description The <code>id</code> of an existing record in the contacts table.
                     * @example architecto
                     */
                    contact_id: string;
                };
            };
        };
        responses: never;
    };
    displayTheSpecifiedResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document signer.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example No query results for model [App\Models\DocumentSigner] 16 */
                        message?: string;
                    };
                };
            };
        };
    };
    updateTheSpecifiedResourceInStorage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document signer.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The <code>id</code> of an existing record in the documents table.
                     * @example null
                     */
                    document_id?: string;
                    /**
                     * @description The <code>id</code> of an existing record in the contacts table.
                     * @example null
                     */
                    contact_id?: string;
                };
            };
        };
        responses: never;
    };
    removeTheSpecifiedResourceFromStorage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the document signer.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    displayAListingOfTheResource: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example [] */
                        data?: unknown[];
                        links?: {
                            /** @example http://localhost:8000/api/signer-document-fields?page=1 */
                            first?: string;
                            /** @example http://localhost:8000/api/signer-document-fields?page=1 */
                            last?: string;
                            /** @example null */
                            prev?: string;
                            /** @example null */
                            next?: string;
                        };
                        meta?: {
                            /** @example 1 */
                            current_page?: number;
                            /** @example null */
                            from?: string;
                            /** @example 1 */
                            last_page?: number;
                            /** @example [
                             *       {
                             *         "url": null,
                             *         "label": "&laquo; Previous",
                             *         "active": false
                             *       },
                             *       {
                             *         "url": "http://localhost:8000/api/signer-document-fields?page=1",
                             *         "label": "1",
                             *         "active": true
                             *       },
                             *       {
                             *         "url": null,
                             *         "label": "Next &raquo;",
                             *         "active": false
                             *       }
                             *     ] */
                            links?: {
                                /** @example null */
                                url?: string;
                                /** @example &laquo; Previous */
                                label?: string;
                                /** @example false */
                                active?: boolean;
                            }[];
                            /** @example http://localhost:8000/api/signer-document-fields */
                            path?: string;
                            /** @example 15 */
                            per_page?: number;
                            /** @example null */
                            to?: string;
                            /** @example 0 */
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    storeANewlyCreatedResourceInStorage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The <code>id</code> of an existing record in the document_signers table.
                     * @example architecto
                     */
                    document_signer_id: string;
                    /**
                     * @description Must be at least 1.
                     * @example 22
                     */
                    page: number;
                    /** @example 4326.41688 */
                    x: number;
                    /** @example 4326.41688 */
                    y: number;
                    /**
                     * @description Must be at least 0.
                     * @example 77
                     */
                    width: number;
                    /**
                     * @description Must be at least 0.
                     * @example 8
                     */
                    height: number;
                    /**
                     * @example text
                     * @enum {string}
                     */
                    type: "signature" | "initials" | "text" | "checkbox" | "date";
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example y
                     */
                    label: string;
                    /** @example Eius et animi quos velit et. */
                    description?: string | null;
                    /** @example false */
                    required?: boolean;
                    /**
                     * @description The <code>id</code> of an existing record in the signs table.
                     * @example null
                     */
                    value_signature_sign_id?: string | null;
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example v
                     */
                    value_initials?: string | null;
                    /** @example architecto */
                    value_text?: string | null;
                    /** @example false */
                    value_checkbox?: boolean | null;
                    /**
                     * @description Must be a valid date.
                     * @example 2025-07-04T14:29:47
                     */
                    value_date?: string | null;
                };
            };
        };
        responses: never;
    };
    displayTheSpecifiedResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the signer document field.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example No query results for model [App\Models\SignerDocumentField] 16 */
                        message?: string;
                    };
                };
            };
        };
    };
    updateTheSpecifiedResourceInStorage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the signer document field.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The <code>id</code> of an existing record in the document_signers table.
                     * @example null
                     */
                    document_signer_id?: string;
                    /**
                     * @description Must be at least 1.
                     * @example 16
                     */
                    page?: number;
                    /** @example 4326.41688 */
                    x?: number;
                    /** @example 4326.41688 */
                    y?: number;
                    /**
                     * @description Must be at least 0.
                     * @example 77
                     */
                    width?: number;
                    /**
                     * @description Must be at least 0.
                     * @example 8
                     */
                    height?: number;
                    /**
                     * @example signature
                     * @enum {string}
                     */
                    type?: "signature" | "initials" | "text" | "checkbox" | "date";
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example y
                     */
                    label?: string;
                    /** @example Eius et animi quos velit et. */
                    description?: string | null;
                    /** @example true */
                    required?: boolean;
                    /**
                     * @description The <code>id</code> of an existing record in the signs table.
                     * @example null
                     */
                    value_signature_sign_id?: string | null;
                    /**
                     * @description Must not be greater than 255 characters.
                     * @example v
                     */
                    value_initials?: string | null;
                    /** @example architecto */
                    value_text?: string | null;
                    /** @example true */
                    value_checkbox?: boolean | null;
                    /**
                     * @description Must be a valid date.
                     * @example 2025-07-04T14:29:47
                     */
                    value_date?: string | null;
                };
            };
        };
        responses: never;
    };
    removeTheSpecifiedResourceFromStorage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the signer document field.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    displayAListingOfTheResource: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example [] */
                        data?: unknown[];
                        links?: {
                            /** @example http://localhost:8000/api/signs?page=1 */
                            first?: string;
                            /** @example http://localhost:8000/api/signs?page=1 */
                            last?: string;
                            /** @example null */
                            prev?: string;
                            /** @example null */
                            next?: string;
                        };
                        meta?: {
                            /** @example 1 */
                            current_page?: number;
                            /** @example null */
                            from?: string;
                            /** @example 1 */
                            last_page?: number;
                            /** @example [
                             *       {
                             *         "url": null,
                             *         "label": "&laquo; Previous",
                             *         "active": false
                             *       },
                             *       {
                             *         "url": "http://localhost:8000/api/signs?page=1",
                             *         "label": "1",
                             *         "active": true
                             *       },
                             *       {
                             *         "url": null,
                             *         "label": "Next &raquo;",
                             *         "active": false
                             *       }
                             *     ] */
                            links?: {
                                /** @example null */
                                url?: string;
                                /** @example &laquo; Previous */
                                label?: string;
                                /** @example false */
                                active?: boolean;
                            }[];
                            /** @example http://localhost:8000/api/signs */
                            path?: string;
                            /** @example 15 */
                            per_page?: number;
                            /** @example null */
                            to?: string;
                            /** @example 0 */
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    storeANewlyCreatedResourceInStorage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The <code>id</code> of an existing record in the users table.
                     * @example null
                     */
                    user_id?: string | null;
                    /**
                     * @description The <code>id</code> of an existing record in the anonymous_users table.
                     * @example null
                     */
                    anonymous_user_id?: string | null;
                };
            };
        };
        responses: never;
    };
    displayTheSpecifiedResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the sign.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example No query results for model [App\Models\Sign] 16 */
                        message?: string;
                    };
                };
            };
        };
    };
    updateTheSpecifiedResourceInStorage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the sign.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The <code>id</code> of an existing record in the users table.
                     * @example null
                     */
                    user_id?: string | null;
                    /**
                     * @description The <code>id</code> of an existing record in the anonymous_users table.
                     * @example null
                     */
                    anonymous_user_id?: string | null;
                };
            };
        };
        responses: never;
    };
    removeTheSpecifiedResourceFromStorage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the sign.
                 * @example 16
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
}
